# Construye la salida de un listado

    hoja = workbook.create_worksheet
    hoja.name = params[:controller].capitalize

    hoja.default_format = formato_xls_normal
    hoja.row(0).default_format = formato_xls_cabecera
    hoja.row(0).height = 25
    hoja[0,0] = (@proyecto ? @proyecto.nombre : params[:seccion].capitalize) + " - " + params[:controller].capitalize + (params[:action] == "index" ? "" : " - " + params[:action].capitalize)

    fila = 1
    # Los campos a sacar son los del listado + los de la informacion adicional
    campos = campos_listado(@tipo) 
    campos += campos_info(@tipo) if campos_info(@tipo)

    # Mete la línea de filtrado
    if @estado_filtrado
      filtrado_por = _("Filtrado por: ")
      @estado_filtrado.each do |filtro|
        filtrado_por += filtro + " | "
      end
      hoja[fila,0] = filtrado_por
      hoja.row(fila).default_format = formato_xls_cabecera
      fila +=1
    end

    # Mete la línea de ordenado
    if session[(params[:controller]+"_cadena_orden").to_sym]
      nombre_campo = session[(params[:controller]+"_cadena_orden").to_sym]
      campos.each { |campo| nombre_campo = campo[0] if campo[2] == session[(params[:controller]+"_cadena_orden").to_sym] }
      ordenado_por = _("Ordenado por: ") + nombre_campo.capitalize
      ordenado_por += " (" + session[(params[:controller]+"_asc_desc").to_sym].downcase + ")" if session[(params[:controller]+"_asc_desc").to_sym] 
      hoja[fila,0] = ordenado_por
      hoja.row(fila).default_format = formato_xls_cabecera
      fila +=1
    end
 
    # Mete las cabeceras de los campos 
    columna=0
    fila += 1
    hoja.row(fila).default_format = formato_xls_negrita
    campos.each do |cmp|
      campo = etiqueta(cmp)
      hoja[fila,columna] = (campo[0]=="&nbsp;" ? "" : campo[0])
      hoja.column(columna).width = campo[2]
      columna += 1; 
    end
    # Mete las cabeceras de los campos de objetos dependientes
    @subobjetos.each do |subobjeto|
      campos_listado(subobjeto).each do |cmp|
        campo = etiqueta(cmp)
        hoja[fila,columna] = (etiqueta[0]=="&nbsp;" ? "" : (campo[0] + " " + subobjeto.tr("_", " ").capitalize) )
        hoja.column(columna).width = campo[2]
        columna += 1;
      end
    end if @subobjetos

    fila += 1

    # Mete cada uno de los elementos proporcionados
    @objetos.each do |objeto|
      columna = 0
      fila_incremento = 1
      # Mete los campos del objeto que hay en el listado
      campos.each do |cmp|
        campo = etiqueta(cmp) 
        valor = objeto 
        valor_real = ""
        cmp.split('.').each do |metodo|
          valor = (metodo =~ /(\S+)\s(\S+)/ ? valor.send($1,$2) : valor.send(metodo)) if valor
        end
        if valor.class.to_s == "Array"
          saltos = 0
          valor.each do |v|
            valor_real += (valor_real=="" ? "" : "\n\r") + v
            saltos += 1
          end
          altura = 12 * saltos
        else
          valor_real = valor
          altura = 13 * (1 + valor_real.to_s.size/campo[2].to_i)
        end
        hoja[fila,columna] = valor_real
        hoja.row(fila).height = altura if altura > hoja.row(fila).height
        columna += 1
      end
      # Mete los campos de los subobjetos dependientes 
      @subobjetos.each do |subobjeto|
        elementos = objeto.send(subobjeto) 
        fila_elemento = 0 
        columna_elemento = columna
        # Recorre cada resultado del subobjeto relacionado
        elementos.each do |elemento|
          columna_elemento = columna 
          # Y va dibujando cada campo
          campos_listado(subobjeto).each do |cmp|
            campo = etiqueta(cmp)
            valor = elemento 
            cmp.split('.').each do |metodo|
              valor = (metodo =~ /(\S+)\s(\S+)/ ? valor.send($1,$2) : valor.send(metodo)) if valor
            end
            hoja[fila_elemento+fila,columna_elemento] = valor
            altura = 13 * (1 + valor.to_s.size/campo[2].to_i)
            hoja.row(fila_elemento+fila).height = altura if altura > hoja.row(fila).height
            columna_elemento += 1
          end
          fila_elemento += 1
        end
        # Ajusta la columna y el incremento maximo que ha habido en filas
        columna = columna_elemento
        fila_incremento = fila_elemento if fila_elemento > fila_incremento 
      end if @subobjetos
      # Ajusta las filas segun el incremento maximo 
      fila += fila_incremento 
    end

